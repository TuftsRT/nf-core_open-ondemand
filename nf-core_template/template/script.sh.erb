#!/usr/bin/env bash

# Clean the environment
module purge

# Load the required module
module load nf-core
module list

# Set the working directory
workdir="<%= context.workdir %>"

# Ensure the working directory exists
if [ ! -d "$workdir" ]; then
    echo "$workdir does not exist. Creating it now..."
    mkdir -p "$workdir"
fi

# Copy necessary files and change to the working directory
cp nf-params.json "$workdir/"
cd "$workdir"

# Check if resume is set
if [ "<%= context.resume %>" -eq 1 ]; then
    echo "Job will resume from the previous run."
    resume="-resume"
else
    echo "This is a fresh run."
    resume=""
fi

# Check if Nextflow Tower will be used
TOKEN="<%= context.TOWER_ACCESS_TOKEN %>"

if [[ -n "${TOKEN// }" ]]; then
    echo "Using Nextflow Tower."
    export TOWER_ACCESS_TOKEN="$TOKEN"
    with_tower="-with-tower"
else
    echo "Not using Nextflow Tower."
    with_tower=""
fi

# Set the Singularity cache directory
export NXF_SINGULARITY_CACHEDIR="/cluster/tufts/biocontainers/nf-core/singularity-images"

# Clean up nf-params.json by removing empty values and replacing placeholders
sed -i '/:[[:space:]]*,/d' nf-params.json  # Delete lines with empty values
sed -i '/"[[:space:]]*"/d' nf-params.json  # Remove empty string values
export projectDir="<%= context.version %>"
export baseDir="<%= context.version %>"
sed -i "s@\$projectDir@$projectDir@g" nf-params.json
sed -i "s@\$baseDir@$baseDir@g" nf-params.json
sed -i 's/"None"/null/g' nf-params.json   # Replace "None" with null

# Define resources based on execution environment
num_memory="<%= context.num_memory %>"
num_core="<%= context.num_core %>"

# Determine execution environment (Slurm or local)
if [ "<%= context.executor %>" == "slurm" ]; then
    echo "Tufts profile will be used; tasks will run on different nodes."
    command="nextflow run <%= context.version %> -params-file nf-params.json -profile tufts --partition <%= context.cpu_partition %> $resume $with_tower"
else
    echo "Running in local mode; all tasks will run on a single node."

    # Create custom.config for local execution
    cat <<EOF > custom.config
cleanup = true

process {
    resourceLimits = [
        cpus: $num_core,
        memory: "$num_memory"
    ]
}
EOF
    echo "custom.config file created with cpus=$num_core and memory=$num_memory."
    command="nextflow run <%= context.version %> -params-file nf-params.json -profile singularity -c custom.config $resume $with_tower"
fi

# Output and execute the command
echo "Executing command: $command"
eval "$command"
