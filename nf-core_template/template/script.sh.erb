#!/usr/bin/env bash

# Exit immediately if a command fails
set -euo pipefail

# Clean the environment
module purge

# Load the required module
module load nf-core
module list

# Set the working directory
workdir="<%= context.workdir %>"

# Ensure the working directory exists
if [[ ! -d "$workdir" ]]; then
    echo "Creating working directory: $workdir"
    mkdir -p "$workdir" || { echo "Error: Failed to create $workdir"; exit 1; }
fi

# Copy necessary files and change to the working directory
cp nf-params.json "$workdir/" || { echo "Error: Failed to copy nf-params.json"; exit 1; }
cd "$workdir" || { echo "Error: Failed to change to directory $workdir"; exit 1; }

# Determine if the job should resume
resume_flag=""
if [[ "<%= context.resume %>" -eq 1 ]]; then
    echo "Resuming previous run."
    resume_flag="-resume"
else
    echo "Starting a fresh run."
fi

# Check if Nextflow Tower should be used
with_tower_flag=""
if [[ -n "${TOWER_ACCESS_TOKEN:="<%= context.tower_access_token %>"}" && -n "${TOWER_ACCESS_TOKEN// }" ]]; then
    echo "Using Nextflow Tower."
    export TOWER_ACCESS_TOKEN="$TOWER_ACCESS_TOKEN"
    with_tower_flag="-with-tower"
else
    echo "Not using Nextflow Tower."
fi

# Set the Singularity cache directory
export NXF_SINGULARITY_CACHEDIR="/cluster/tufts/biocontainers/nf-core/singularity-images"

# Clean up nf-params.json by removing empty values and replacing placeholders
sed -i -E '/:[[:space:]]*,/d; /"[[:space:]]*"/d' nf-params.json
export projectDir="<%= context.version %>"
export baseDir="<%= context.version %>"
sed -i -E "s@\$(projectDir)@$projectDir@g; s@\$(baseDir)@$baseDir@g; s/\"None\"/null/g" nf-params.json

# Define resources based on execution environment
num_memory="<%= context.num_memory %>"
num_core="<%= context.num_core %>"

# Build Nextflow command
nextflow_command=("nextflow run <%= context.version %> -params-file nf-params.json")

if [[ "<%= context.executor %>" == "slurm" ]]; then
    echo "Using Tufts profile (Slurm execution)."
    nextflow_command+=("-profile tufts" "--partition <%= context.cpu_partition %>")
else
    echo "Running in local mode (single-node execution)."

    # Generate custom.config for local execution
    cat <<EOF > custom.config
cleanup = true

process {
    resourceLimits = [
        cpus: $num_core,
        memory: "$num_memory"
    ]
}
EOF

    echo "custom.config file created with cpus=$num_core and memory=$num_memory."
    nextflow_command+=("-profile singularity" "-c custom.config")
fi

# Append optional flags
[[ -n "$resume_flag" ]] && nextflow_command+=("$resume_flag")
[[ -n "$with_tower_flag" ]] && nextflow_command+=("$with_tower_flag")

# Output and execute the command
echo "Executing command: ${nextflow_command[*]}"
eval "${nextflow_command[*]}"