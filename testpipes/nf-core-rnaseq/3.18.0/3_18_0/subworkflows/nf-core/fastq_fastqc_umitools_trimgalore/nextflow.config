if (!(params.skip_fastqc || params.skip_qc)) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
                ext.args   = '--quiet'
                ext.prefix = { "${meta.id}_raw" }
                publishDir = [
                    path: { "${params.outdir}/fastqc/raw" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_trimming) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
                ext.args   = {
                    // Function to convert argument strings into a map
                    def argsToMap = { String args ->
                        args.split("\\s(?=--)").collectEntries {
                            def parts = it.trim().split(/\s+/, 2)
                            [(parts.first()): parts.last()]
                        }
                    }

                    // Initialize the map with preconfigured values
                    def preset_args_map = argsToMap("""
                    --fastqc_args '-t ${task.cpus}'
                    """.trim())

                    // Consolidate the extra arguments
                    def final_args_map = preset_args_map + (params.extra_trimgalore_args ? argsToMap(params.extra_trimgalore_args) : [:])

                    // Convert the map back to a list and then to a single string
                    final_args_map.collect { key, value -> "${key} ${value}" }.join(' ').trim()
                }
                ext.prefix = { "${meta.id}_trimmed" }
                publishDir = [
                    [
                        path: { "${params.outdir}/fastqc/trim" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{html,zip}"
                    ],
                    [
                        path: { params.save_trimmed ? "${params.outdir}/${params.trimmer}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: "*.fq.gz",
                        saveAs: { params.save_trimmed ? it : null }
                    ],
                    [
                        path: { "${params.outdir}/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.txt"
                    ]
                ]
            }
        }
    }
}

if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = { [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim() }
            publishDir = [
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { params.save_umi_intermeds ? "${params.outdir}/umitools" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { params.save_umi_intermeds ? it : null }
                ]
            ]
        }
    }
}
