def generateStarAlignArgs(save_unaligned, contaminant_screening, extra_star_align_args) {
    def argsToMap = { String args ->
        args.split(/\s(?=--)/).collectEntries {
            def parts = it.trim().split(/\s+/, 2)
            [(parts[0]): parts.size() > 1 ? parts[1] : '']
        }
    }

    def base_args = """
        --quantMode TranscriptomeSAM
        --twopassMode Basic
        --outSAMtype BAM Unsorted
        --readFilesCommand zcat
        --runRNGseed 0
        --outFilterMultimapNmax 20
        --alignSJDBoverhangMin 1
        --outSAMattributes NH HI AS NM MD
        --outSAMstrandField intronMotif
    """.trim()

    if (save_unaligned || contaminant_screening) {
        base_args += "\n--outReadsUnmapped Fastx"
    }

    def final_args_map = argsToMap(base_args) + (extra_star_align_args ? argsToMap(extra_star_align_args) : [:])
    final_args_map.collect { key, value -> "${key} ${value}".trim() }.join(' ')
}

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {

        // We have to condition this, because the args are slightly different between the latest STAR and the one compatible with iGenomes

        withName: '.*:ALIGN_STAR:STAR_ALIGN' {
            ext.args   = {
                generateStarAlignArgs(
                    params.save_unaligned,
                    params.contaminant_screening,
                    (params.extra_star_align_args ?: '') + ' --quantTranscriptomeSAMoutput BanSingleEnd'
                )
            }
        }
        withName: '.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
            ext.args   = {
                generateStarAlignArgs(
                    params.save_unaligned,
                    params.contaminant_screening,
                    (params.extra_star_align_args ?: '') + ' --quantTranscriptomeBan Singleend'
                )
            }
        }
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {

            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds ? it : null }
                ],
                [
                    path: { params.save_unaligned ? "${params.outdir}/${params.aligner}/unmapped" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_unaligned ? it : null }
                ]
            ]
        }
    }
}
