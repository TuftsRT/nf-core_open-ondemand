#!/bin/bash
set -euo pipefail
set +x
IFS=$'\n\t'

generate_module() {
    # generate_module $Pipeline $Version $lmod_out

    local pipeline=$1
    local ver=$2
    local output=$3
    converted_version=$(echo "$ver" | sed 's/\./_/g')
    # Initialize description and homepage variables
    local homepage=""
    local description=""

    # Ensure template file exists
    local template_file="${TEMPLATE_DIR}/lmod_template.lua"
    if [[ ! -f "$template_file" ]]; then
        echo "Error: Template file '$template_file' not found."
        return 1
    fi

    # Substitute placeholders in the template
    local modulefile_content=$(sed -e "s|\${PIPELINE}|$pipeline|g" \
                                   -e "s|\${VERSION}|$ver|g" \
                                   -e "s|\${VERSION_}|$converted_version|g" \
                                   "$template_file")

    # Output the generated modulefile
    echo "$modulefile_content" > "$output" # Added quotes to $output
}


parentfolder=$(git rev-parse --show-toplevel)
input=""
output=""
TEMPLATE_DIR="$parentfolder/module_templates"

while [[ $# -gt 0 ]]; do
        case "$1" in
                -i|--input)
                        input_dir=$2
                        shift 2
                        ;;
                -o|--output)
                        output_dir=$2
                        shift 2
                        ;;
                -m|--module)
                        module_outdir=$2
                        shift 2
                        ;;
                -h|--help)
                        echo "Usage: nf-ood-mod -i/--input input -o/--output output -m/--module module_outdir"
                        echo "This script will convert nf-core pipelines into OOD apps."
                        echo "Arguments:"
                        echo " -i/--input input   - The input directory where nf-core pipelines are stored"
                        echo " -o/--output output  - The output directory where the OOD apps will be generated"
                        echo " -m/--module module_outdir - The output directory where the module files will be generated"
                        exit 0
                        ;;
                *)
                        echo "Invalid argument: $1"
                        exit 1
                        ;;
        esac
done

# Remove existing output folder if it exists
if [ -d "$output_dir" ]; then
        echo "The output folder already exists. Do you want to continue and delete it? (y/n)"
        read answer
        if [ "$answer" == "y" ]; then
                echo "Deleting the output folder..."
                rm -r "$output_dir"
                mkdir -p "$output_dir"
        else
                echo "Will use the existing output folder."
        fi
else
        mkdir -p "$output_dir" # Changed mkdir to mkdir -p
fi

# Remove existing module output folder if it exists
if [ -d "$module_outdir" ]; then
        echo "The module output folder already exists. Do you want to continue and delete it? (y/n)"
        read answer
        if [ "$answer" == "y" ]; then
                echo "Deleting the module output folder..."
                rm -r "$module_outdir"
                mkdir -p "$module_outdir"
        else
                echo "Will use the existing module output folder."
        fi
else
        mkdir -p "$module_outdir" # Changed mkdir to mkdir -p
fi

# Get list of pipelines in the input folder
pipelines=$(ls "$input_dir")


# Function to generate OOD app and module for a given pipeline version
generate_pipeline() {
    local PIPELINE=$1
    local VERSION=$2
    local CONVERTED_VERSION="${VERSION//./-}"
    echo "Generating OOD app and modules for $PIPELINE v$VERSION"

    # Copy template files
    cp -r "${parentfolder}/nf-core_template" "${output_dir}/${PIPELINE}-${CONVERTED_VERSION}"

    # Set input and output file paths
    local OUTDIR=${output_dir}/${PIPELINE}-${CONVERTED_VERSION}
    inputJson="${input_dir}/${PIPELINE}/${VERSION}/$(echo "${VERSION}" | tr '.' '_')/nextflow_schema.json"
    formYmlOut="${OUTDIR}/form.yml.erb"
    formJsOut="${OUTDIR}/form.js"
    templateFile="${OUTDIR}/template.erb"
    paramsJsonOut="${OUTDIR}/template/nf-params.json.erb"
    # Run json2ood.py script
    python "${parentfolder}/json2ood.py" "$inputJson" "$formYmlOut" "$templateFile" "$paramsJsonOut" "$formJsOut"

    # Replace placeholders in template files
    replace_placeholders "$PIPELINE" "$VERSION" "${OUTDIR}" "$formYmlOut" "$paramsJsonOut" # Added formYmlOut and paramsJsonOut
    mkdir -p "${module_outdir}/${PIPELINE}"
    generate_module "$PIPELINE" "$VERSION" "${module_outdir}/${PIPELINE}/${VERSION}.lua" #call generate_module
}

# Function to perform sed replacements
perform_sed_replacement() {
    local file="$1"
    local pattern="$2"
    local replacement="$3"
    if [ ! -f "$file" ]; then
        echo "File not found: $file" >&2
        exit 1
    fi
    sed -i -e "s#$pattern#$replacement#g" "$file"
}

# Function to replace placeholders in template files
replace_placeholders() {
    local PIPELINE=$1
    local VERSION=$2
    local CONVERTED_VERSION="${VERSION//./_}"
    local COMBINED_VERSION="${VERSION}/${CONVERTED_VERSION}"
    local OUTDIR=$3
    local formYmlOut=$4 # Added
    local paramsJsonOut=$5 # Added

    # Perform substitutions
    perform_sed_replacement "${OUTDIR}/submit.yml.erb" "PIPELINE" "${PIPELINE}"
    perform_sed_replacement "${OUTDIR}/manifest.yml" "PIPELINE" "${PIPELINE##*-}"
    perform_sed_replacement "${OUTDIR}/manifest.yml" "VERSION" "${VERSION}"
    perform_sed_replacement "${OUTDIR}/template/script.sh.erb" "VERSION" "${COMBINED_VERSION}"
    perform_sed_replacement "${OUTDIR}/template/script.sh.erb" "PIPELINE" "${PIPELINE}"
    perform_sed_replacement "$formYmlOut" "PIPELINE" "${PIPELINE}"
    sed -i '/- igenomes_base/d' "$formYmlOut"
    sed -i "s/value: True/value: true/g" "$formYmlOut"
    sed -i "s/value: False/value: false/g" "$formYmlOut"

    # TODO: update igenomes_base
    sed -i -e 's$<%= context.igenomes_base %>$/cluster/tufts/biocontainers/datasets/igenomes$' "$paramsJsonOut"

    # Remove template file
    rm "$templateFile" # Assuming this is defined elsewhere
}

# Main loop to process each pipeline and version
for PIPELINE in $pipelines; do
    echo "Generating OOD app and modules for $PIPELINE"

    VersionArray=($(ls -1 "${input_dir}/${PIPELINE}/")) # Corrected input dir
    for version in "${VersionArray[@]}"; do
        generate_pipeline "$PIPELINE" "$version"
    done
done
